#!/usr/bin/env node

"use strict";

const fs = require("fs");
const pkg = require("../package.json");
const Handlebars = require("handlebars");
const program = require("commander");
const ps = require("process");
const palette = require("@srcery-colors/srcery-palette");

// https://github.com/stayradiated/termcolors/blob/master/lib/colr.js
function doubleHex(context) {
  let hex = context.slice(1);
  let r = hex.slice(0, 2);
  let g = hex.slice(2, 4);
  let b = hex.slice(4, 6);
  return '#' + r + r + g + g + b + b;
}

Handlebars.registerHelper("lower", (hex) => {
  return hex.toLowerCase()
});

Handlebars.registerHelper("double", (hex) => {
  return doubleHex(hex).toLowerCase();
});

// Make sure you pass rgb not hex to this helper
Handlebars.registerHelper("avgRGB", (color) => {
  return color / 255
});

// optionally pass join string
Handlebars.registerHelper("join", (arr, rest) => {
  let c = ",";
  if (typeof rest === "string") c = rest;
  return arr.join(c);
});

// optionally pass substr index
Handlebars.registerHelper("sub", (hex, rest) => {
  let i = 1;
  if (typeof rest === "number") i = rest;
  return hex.substring(i).toLowerCase();
});

const templates = {
  alacritty:       "templates/alacritty.hbs",
  blink:           "templates/blink.hbs",
  chromeshell:     "templates/chrome-secure-shell.hbs",
  genode:          "templates/genode.hbs",
  gnome:           "templates/gnome.hbs",
  guake:           "templates/guake.hbs",
  iterm:           "templates/iterm.hbs",
  kitty:           "templates/kitty.hbs",
  konsole:         "templates/konsole.hbs",
  linux:           "templates/linux.hbs",
  lxterminal:      "templates/lxterminal.hbs",
  mintty:          "templates/mintty.hbs",
  pantheon:        "templates/pantheon.hbs",
  putty:           "templates/putty.hbs",
  st:              "templates/st.hbs",
  terminator:      "templates/terminator.hbs",
  termite:         "templates/termite.hbs",
  termux:          "templates/termux.hbs",
  tilix:           "templates/tilix.hbs",
  windowsterminal: "templates/windows_terminal.hbs",
  xfce:            "templates/xfce.hbs",
  xresources:      "templates/xresources.hbs",
  md:              "templates/README.hbs"
}

program
  .version(pkg.version)
  .option('-l, --list', 'List available formats')
  .option('-o, --output [format]', 'Output format')
  .parse(ps.argv);

const opts = program.opts();

if (opts.list) {
  Object.keys(templates).forEach(key => {
    console.log(key);
  });
  ps.exit();
}

if (!opts.output) {
  console.log('Must declare an output format');
  ps.exit(1);
}

if (!Object.prototype.hasOwnProperty.call(templates, opts.output)) {
  console.log('Invalid output format: ', opts.output);
  ps.exit(1);
}

const file = fs.readFileSync(templates[opts.output], "utf8");
const template = Handlebars.compile(file);
ps.stdout.write(template(palette));
ps.exit();
